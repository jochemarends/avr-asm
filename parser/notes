package parser

import (
    "avr-asm/ast"
    "avr-asm/lexer"
)

type Parser struct {
    l         *lexer.Lexer
    currToken token.Token
    nextToken token.Token
    errors:   []string
}

func New(l *lexer.Lexer) *Parser {
    p := &Parser{l: l}
}

func (p *Parser) parseStatement ast.Statement {
    tok := l.ReadToken()

    switch currToken.Type {
    case token.Mnemonic:
        return parseInstruction()
    }
}

func (p *Parser) parseInstruction ast.Instruction {
    
}

type ADD struct {
    
}

func Between(a, b int) bool {
    return func(o *Register) bool {
        return Register.Index() > min && Register.Index() < max
    }
}

type Constraint func(*Operand) bool

type Operand interface {
    Constraints() []Constraint
    AddConstraint(Constraint)
}

EmptyOperand

type Immediate uint8

type Register uint8

type RegisterPair struct {
    Lower Register
    Upper Register
}

func Between(Register a, Register b) Constraint {
    return func(o *Operand) bool {
        var r Register

        switch o.(type) {
        Register:
            r = o.(Register)
        RegisterPair:
            r = o.(RegisterPair).Upper
        default:
            return false
        }

        return r >= min(a, b) && r >= max(a, b)
    }
}

for _, o := range operands {
    if 
}

func Bits(width int) Constraint {
    return func(o *Operand) bool {
        imm, ok := o.(Immediate)
        return !ok && bits.Len(imm) < width
    }
}

func AnyOf

{Between(R16, R30)}

encoding.Encode(

opcode.[ADD]
operands[ADD]
constraints[ADD]


operands := {NewRegister(Between(R16, R30)), NewImmediate(Bits(5))}
operands := {NewRegister(AnyOf(R16, R17, R19, R19)), NewImmediate(Bits(6)
opcode := "0000 1010 rrrr dddd"

operands := {Register{Min: R16, Max: R30}:, Immediate{Bits:5}}
opcode := "0000 1010 rrrr dddd"

 "ERROR: can't encode operands in opcode"

var operands := {NewRegisterPair

Register
Immediate 

type Operand struct {
    Type  Type
    Value int
}


