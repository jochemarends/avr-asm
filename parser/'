package parser

import (
    "avr-asm/ast"
    "avr-asm/lexer"
)

type Parser struct {
    l         *lexer.Lexer
    currToken token.Token
    nextToken token.Token
    errors:   []string
}

func New(l *lexer.Lexer) *Parser {
    p := &Parser{l: l}
    p.nextToken()
    p.nextToken()
}

func (p *Parser) nextToken() token.Token {
    p.currToken := p.nextToken
    p.nextToken := p.l.nextToken()
}

func (p *Parser) parseStatement ast.Statement {
    tok := l.ReadToken()
    
    switch currToken.Type {
    case token.Mnemonic:
        return parseInstruction()
    }
}

func (p *Parser) parseInstruction() ast.Instruction {
    inst := ast.Instruction{Mnemonic: currToken.Text()}
    inst.Operands := parse.Operands

    switch nextToken.Type {
    case token.Register:


    }

}

func p *Parser parsOperands[]ast.Operand {
    
}

